---
- name: Bootstrapping kubernetes
  hosts: k8s_master
  vars_files: vars/general.yml

  tasks:
    - name: Initializing Kubernetes on the master.
      shell: kubeadm init --pod-network-cidr={{ calico_cidr }}/16 --ignore-preflight-errors=all

    - name: Creating a kube directory on the master for the config files.
      file: 
        path: $HOME/.kube
        state: directory

    - name: Copying the kube config to the kube directory.
      shell: cp -i /etc/kubernetes/admin.conf $HOME/.kube/config

    - name: Downloading the Calico Pod Network manifest.
      get_url: 
        url: "{{ calico_policy_url }}"
        dest: /tmp/calico.yml

    - name: Modifying the Pod network CIDR for Calico.
      replace:
        path: /tmp/calico.yml
        regexp: 192.168.0.0
        replace: "{{ calico_cidr }}"

    - name: Adding the role binding for Calico to Kubernetes.
      shell: kubectl apply -f {{ calico_rbac_url }}

    - name: Applying the Calico Pod Network to Kubernetes.
      k8s:
        src: /tmp/calico.yml
        state: present

    - name: Deleting the Calico Pod Network manifest from disk.
      file: 
        path: /tmp/calico.yml
        state: absent

    - name: Deploying the Dashboard to Kubernetes.
      shell: kubectl apply -f {{ k8s_dasboard_url }}

    - name: Configuring RBAC for the Dashboard service account.
      k8s:
        definition: "{{ lookup('template', 'files/templates/Dashboard/{{ item }}') | from_yaml }}"
      with_items: 
        - "sa_dashboard.yml.j2"
        - "rb_dashboard.yml.j2" 

    - name: Deploying Heapster, InfluxDB, and configuring RBAC for the Dashboard stack.
      k8s:
        definition: "{{ lookup('template', 'files/manifests/Dashboard/{{ item }}') | from_yaml }}"
      with_items:         
        - "sa_heapster.yml"
        - "rb_heapster.yml"
        - "svc_heapster.yml"
        - "svc_influxdb.yml"
        - "dep_heapster.yml"
        - "dep_influxdb.yml"

    - name: Retrieving the authentication token for your service user.
      shell: kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep {{ k8s_user_name }} | awk '{print $1}') | grep 'token:' | awk '{print $2}'
      register: k8s_user_token 
  
    - name: Retreiving the kube config.
      shell: cat ~/.kube/config
      register: k8s_config

    - name: Creating a local ~/.kube directory on your workstation.
      local_action:
        module: file
        path: ~/.kube
        state: directory

    - name: Copying authentication token to your workstation.
      local_action: copy content={{ k8s_user_token.stdout }} dest=~/.kube/authentication_token

    - name: Copying ~/.kube/config to your workstation.
      local_action: copy content={{ k8s_config.stdout }} dest=~/.kube/config

    - name: Retreiving the kubeadm join command.
      shell: kubeadm token create --print-join-command
      when: k8s_join_command is undefined
      register: k8s_join_command

- name: Joining nodes to master
  hosts: k8s_nodes
  tasks:
   - name: Joining the nodes to the master.
     shell: "{{ hostvars[groups['k8s_master'][0]]['k8s_join_command']['stdout'] }} --ignore-preflight-errors=all"


- name: Echo instructions
  hosts: localhost
  become: false
  tasks:
    - name: Echoing instructions to user.
      debug:
        msg: "Check your ~/.kube directory for secrets. You can now connect to the dashboard by running $(kubectl proxy) and navigating to http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/"
